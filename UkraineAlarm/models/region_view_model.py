# coding: utf-8

"""
    Ukraine Alert API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0
    Contact: support@stfalcon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RegionViewModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'region_id': 'str',
        'region_name': 'str',
        'region_type': 'V2RegionType',
        'region_child_ids': 'list[RegionViewModel]'
    }

    attribute_map = {
        'region_id': 'regionId',
        'region_name': 'regionName',
        'region_type': 'regionType',
        'region_child_ids': 'regionChildIds'
    }

    def __init__(self, region_id=None, region_name=None, region_type=None, region_child_ids=None):  # noqa: E501
        """RegionViewModel - a model defined in Swagger"""  # noqa: E501
        self._region_id = None
        self._region_name = None
        self._region_type = None
        self._region_child_ids = None
        self.discriminator = None
        if region_id is not None:
            self.region_id = region_id
        if region_name is not None:
            self.region_name = region_name
        if region_type is not None:
            self.region_type = region_type
        if region_child_ids is not None:
            self.region_child_ids = region_child_ids

    @property
    def region_id(self):
        """Gets the region_id of this RegionViewModel.  # noqa: E501


        :return: The region_id of this RegionViewModel.  # noqa: E501
        :rtype: str
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id):
        """Sets the region_id of this RegionViewModel.


        :param region_id: The region_id of this RegionViewModel.  # noqa: E501
        :type: str
        """

        self._region_id = region_id

    @property
    def region_name(self):
        """Gets the region_name of this RegionViewModel.  # noqa: E501


        :return: The region_name of this RegionViewModel.  # noqa: E501
        :rtype: str
        """
        return self._region_name

    @region_name.setter
    def region_name(self, region_name):
        """Sets the region_name of this RegionViewModel.


        :param region_name: The region_name of this RegionViewModel.  # noqa: E501
        :type: str
        """

        self._region_name = region_name

    @property
    def region_type(self):
        """Gets the region_type of this RegionViewModel.  # noqa: E501


        :return: The region_type of this RegionViewModel.  # noqa: E501
        :rtype: V2RegionType
        """
        return self._region_type

    @region_type.setter
    def region_type(self, region_type):
        """Sets the region_type of this RegionViewModel.


        :param region_type: The region_type of this RegionViewModel.  # noqa: E501
        :type: V2RegionType
        """

        self._region_type = region_type

    @property
    def region_child_ids(self):
        """Gets the region_child_ids of this RegionViewModel.  # noqa: E501


        :return: The region_child_ids of this RegionViewModel.  # noqa: E501
        :rtype: list[RegionViewModel]
        """
        return self._region_child_ids

    @region_child_ids.setter
    def region_child_ids(self, region_child_ids):
        """Sets the region_child_ids of this RegionViewModel.


        :param region_child_ids: The region_child_ids of this RegionViewModel.  # noqa: E501
        :type: list[RegionViewModel]
        """

        self._region_child_ids = region_child_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RegionViewModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RegionViewModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
